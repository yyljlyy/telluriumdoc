#summary Tellurium快速上手指南.
#labels Phase-Implementation,Phase-Support

= 简介 =

Tellurium是一个开源的网页测试框架，现阶段还是建立在Selenium之上。 但有很多独特的测试理念。 比之Selenium, 维护性，鲁棒性， 和可复用性都要好。 它支持JUnit和TestNG。Tellurium的测试代码可以用Java, Groovy和纯DSL脚本来写. 

== Tellurium子项目 ==

Tellurium由以下子项目构成：
  * Tellurium Core: 处理DSL, 自动生成Runtime Locator，和测试案例的支持。
  * Tellurium Engine: 是Tellurium的底层测试驱动模块
  * Tellurium Widget: 是Tellurium的扩展，可以定义Javascript库, 如Dojo和ExtJS,的Widget，以便重用。
  * Tellurium UI Module Plugin (TrUMP): 是个Firefox插件，能够让用户在待测网页上选择所需的UI元素，然后自动生成Tellurium UI模块。
  * Tellurium Reference Project: 是Tellurium的参考项目，测试代码是为Tellurium项目的网页而写的。主要向用户展示如何定义自己的Tellurium物件(Object), 如何写Tellurium测试代码，数据驱动代码，和纯DSL脚本。参考项目有两个，分别为JUnit项目和TestNG项目。
  * Tellurium Maven Archetypes: 方便用户创建自己的Tellurium测试项目。有两个Archetype,为JUnit项目和TestNG项目而设。

http://tellurium-users.googlegroups.com/web/TelluriumProjects.png?gsc=8WCcfRYAAABueqEHekK8LxR3X1leEByKg-kXU5InE09W2o0GCSVgCQ

== 一点Tellurium概念 ==

虽然Tellurium脱胎于Selenium,但两者在概念上有很大的不同。Selenium主要是用记录和重播(Record and Replay)模式，而Tellurium要求你首先定义待测的UI模块。下面列出Tellurium的一些主要概念：

=== Tellurium物件 ===

Tellurium定义了一些常用的物件，如Button, Table, Form等。

|| *Tellurium物件* || *缺省属性* ||
|| Button || tag: "input" ||
|| Container || ||
|| CheckBox || tag: "input", type: "checkbox" ||
|| Div || tag: "div" ||
|| Form || tag: "form" ||
|| Image || tag: "img" ||
|| InputBox || tag: "input" ||
|| RadioButton || tag: "input", type: "radio" ||
|| Selector || tag: "select" ||
|| Span || tag: "span" ||
|| SubmitButton || tag: "input", type: "submit" ||
|| Table || tag: "table" ||
|| UrlLink || tag: "a" ||
|| StandardTable || tag: "table" ||

值得注意的是Tellurium物件大多为抽象物件，比如Container就可以实用于不同的HTML标签。每个Tellurium物件都有一个uid，即它的别名。

== Locator ==

Locator是用来定位一个元素在网页DOM中的位置，Tellurium支持两种Locator, 一种叫_Base Locator_, 用“locator”标识，它是一个相对的XPath. 如：
{{{
InputBox(uid: "SearchBox", locator: "//input[@title='Google Search']")
}}}

另一个是_Composite Locator_, 用“clocator”来标识，它是由一组属性构成，如
{{{
InputBox(uid: "SearchBox", clocator: [title: "Google Search"])
}}}

_Composite Locator_是Tellurium的缺省Locator, 它容易写，表叙性好，方便动态生成Runtime Locator.

=== UI模块 ===
 
UI模块是一个复合的Tellurium物件，它是由一些单个Tellurium物件嵌套构成。一个UI模块往往代表DOM的一个子树。比如Google首页搜索模块就可以表叙为

{{{
ui.Container(uid: "GoogleSearchModule", clocator: [tag: "td"], group: "true"){
   InputBox(uid: "Input", clocator: [title: "Google Search"]，respond: ["focus", "mouseOver"])
   SubmitButton(uid: "Search", clocator: [name: "btnG", value: "Google Search"])
   SubmitButton(uid: "ImFeelingLucky", clocator: [value: "I'm Feeling Lucky"])
}
}}}

UI模块的最外层元素以定要以"ui."开始。这里group为“true”表示Tellurium用利用UI元素之间的关系来协助它们在网页DOM中的定位。respond属性定义了InputBox需要触发“focus”和“mouseOver”事件，Tellurium会自动触发这些事件的。

=== Tellurium测试案例 ===

Tellurium测试代码可以用Java, Groovy, 或纯DSL脚本来写。无论哪种方法，Tellurium要求你定义独立的UI模块，使之和测试代码分离，以便于维护。UI模块必须继承Tellurium的DslContext class, 一般你还需定义对UI模块的操作方法。例如：

{{{
class GoogleSearchModule extends DslContext{

    public void defineUi() {
ui.Container(uid: "google_start_page", clocator: [tag: "td"], group: "true"){
            InputBox(uid: "searchbox", clocator: [title: "Google Search"])
            SubmitButton(uid: "googlesearch", clocator: [name: "btnG", value: "Google Search"])
            SubmitButton(uid: "Imfeelinglucky", clocator: [value: "I'm Feeling Lucky"])
        }
   }
   def doGoogleSearch(String input){
        keyType "searchbox", input
        pause 500
        click "googlesearch"
        waitForPageToLoad 30000
    }

    def doImFeelingLucky(String input){
        type "searchbox", input
        pause 500
        click "Imfeelinglucky"
        waitForPageToLoad 30000
    }
}
}}}

如果你的测试案例用JUnit来写，你需要继承TelluriumJavaTestCase.

{{{
ublic class GoogleSearchTestCase extends TelluriumJavaTestCase {
    private static GoogleSearchModule gsm;
    
    @BeforeClass
    public static void initUi() {
        gsm = new GoogleSearchModule();
        gsm.defineUi();
    }

    @Before
    public void connectToGoogle() {

        connectUrl("http://www.google.com");
    }

    @Test
    public void testGoogleSearch() {
        gsm.doGoogleSearch("tellurium . ( Groovy ) Test");
    }

    @Test
    public void testGoogleSearchFeelingLucky() {
        gsm.doImFeelingLucky("tellurium automated Testing");
    }
}
}}}

TestNG的案例类似，除了你要继承TelluriumTestNGTestCase。如果用Groovy, 你需要继承TelluriumGroovyTestCase.

=== Tellurium配置 ===


= 创建自己的Tellurium测试项目 =

Tellurium有自己的Firefox Plugin和Maven archetype. 要创建一个Tellurium测试项目很简单， 用一个Maven命令就行, 比如

{{{
mvn archetype:create -DgroupId=example -DartifactId=demo -DarchetypeArtifactId=tellurium-junit-archetype -DarchetypeGroupId=tellurium -DarchetypeVersion=1.0-SNAPSHOT
}}}

这个命令创建了Tellurium JUnit 测试项目。 当然， 在这之前，你必须把Tellurium Maven Repository加到你的Maven settings.xml文件中

{{{
<settings>
<profiles>
<profile>
<activation>
<activebydefault>true</activebydefault>
</activation>
<repositories>
<repository>
<id>kungfuters-public-snapshots-repo</id>
<name>Kungfuters.org Public Snapshot Repository</name>
<releases>
<enabled>false</enabled>
</releases>
<snapshots>
<enabled>true</enabled>
</snapshots>
<url>http://kungfuters.org/nexus/content/repositories/snapshots</url>
</repository>
<repository>
<id>kungfuters-public-releases-repo</id>
<name>Kungfuters.org Public Releases Repository</name>
<releases>
<enabled>true</enabled>
</releases>
<snapshots>
<enabled>false</enabled>
</snapshots>
<url>http://kungfuters.org/nexus/content/repositories/releases</url>
</repository>
</repositories>
</profile>
</profiles>
</settings>
}}}

然后用编辑器如IntelliJ IDEA打开项目用如下部步骤，

{{{
New Project > Import project from external model > Maven > Project directory > Finish
}}}

你会发现项目中有以下文件
{{{
pom.xml
src
src/main
src/main/groovy
src/main/resources
src/test
src/test/groovy
src/test/groovy/module
src/test/groovy/module/GoogleSearchModule.groovy
src/test/groovy/test
src/test/groovy/test/GoogleSearchTestCase.java
src/test/resources
TelluriumConfig.groovy
}}}

其中TelluriumConfig.groovy是Tellurium配置文件， 而GoogleSearchModule是示范网页模块文件， 而GoogleSearchTestCase是示范测试文件。
检查项目的Groovy配置， 确保是1.6.0版本。 然后就可以运行示范测试文件了。

Tellurium的Firefox Plugin(TrUMP)可以用来自动创建网页模块文件， 然后你加入测试逻辑就行了。 TrUMP可以从Tellurium网站下载

http://code.google.com/p/aost/downloads/list

或者从Firefox addons直接下载

https://addons.mozilla.org/en-US/firefox/addon/11035

如果有问题， 可到Tellurium用户组去提问

http://groups.google.com/group/tellurium-users

这个示范的在线版在

http://www.slideshare.net/John.Jian.Fang/ten-minutes-to-tellurium

此外Tellurium网站还有相关的视频下载。 